/*
 * Copyright 2017, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply from: '../common.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: '../jacoco.gradle' //since app module doesn't apply module-core/library.gradle, thus apply jacoco.gradle extra
apply plugin: 'io.fabric'

final APK_NAME = "ImageAnalyzer"

android {
    compileSdkVersion sdk_version
    defaultConfig {
        applicationId 'com.example.android.coverage'
        minSdkVersion min_sdk_version
        targetSdkVersion sdk_version
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [crashlytics:getLocalProperty("crashlytics_key")]
        resValue "string", "app_name", "iAnalyzer (DEFAULT)"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //TODO UI? testCoverageEnabled = true
            ext.enableCrashlytics = true
        }
        debug {
            minifyEnabled false
            //TODO UI? testCoverageEnabled = true
            ext.enableCrashlytics = false
        }
    }
    dataBinding {
        enabled = true
    }
    flavorDimensions "env"

    productFlavors {
        mock {
            dimension = "env"
            versionNameSuffix "-mock"
            applicationIdSuffix ".mock"
            resValue "string", "app_name", "iAnalyzer M"
            ext.enableCrashlytics = false
        }

        dev {
            dimension = "env"
            versionNameSuffix "-dev"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "iAnalyzer D"
            ext.enableCrashlytics = true
        }

        production {
            dimension = "env"
            applicationIdSuffix ".prod"
            resValue "string", "app_name", "iAnalyzer"
            ext.enableCrashlytics = true
        }
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all {variant ->

        //exclude test utils from any generated apk variant
        variant.getCompileConfiguration().exclude module: 'module-test-utils'
        variant.getRuntimeConfiguration().exclude module: 'modole-test-utils'
        renameArtifact(variant, APK_NAME)

//        def filesAuthorityValue = applicationId + ".fileprovider"
//        variant.buildConfigField "String", "FILES_AUTHORITY", "\"${filesAuthorityValue}\""
//        variant.getMergedFlavor().manifestPlaceholders = [filesAuthority: filesAuthorityValue]
    }

}

dependencies {

    implementation project(':module-core')
    implementation project(':module-test-utils')
    implementation project(':module-text-recognition')
    implementation project(':module-face-detection')

    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version") {
        transitive = true;
    }
}
